#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'json'
require 'fileutils'

require_relative 'classes/patch'
require_relative 'classes/arraystruct.rb'
require_relative 'classes/functions'
require_relative 'classes/os'
require_relative 'classes/library'
require_relative 'classes/fetch'
require_relative 'classes/unpack'
require_relative 'classes/build'
require_relative 'classes/install'
require_relative 'classes/platforms'
require_relative 'classes/exec'


def show_banner
	return unless $libbuildtool_params.show_banner
	puts <<BANNER
.__  ._____.  ___.         .__.__       .___ __                .__   
|  | |__\\_ |__\\_ |__  __ __|__|  |    __| _//  |_  ____   ____ |  |  
|  | |  || __ \\| __ \\|  |  \\  |  |   / __ |\\   __\\/  _ \\ /  _ \\|  |  
|  |_|  || \\_\\ \\ \\_\\ \\  |  /  |  |__/ /_/ | |  | (  <_> |  <_> )  |__
|____/__||___  /___  /____/|__|____/\\____ | |__|  \\____/ \\____/|____/
             \\/    \\/                    \\/                          
BANNER
end


def puts_banner text, col = 40, char = '*'
	puts ''.rjust(col, char)
	puts "*#{text.center(col -2 )}*"
	puts ''.rjust(col, char)
end

#######################################
### Options and parameters handling ###
#######################################

	DEFAULT_LIBRARIES_LIST = 'libraries.rb'
	$libbuildtool_params = OpenStruct.new(
			:show_banner    => true,
			:libraries_list   => nil,
			:rebuild => false,
			:install_dir => "#{Dir.pwd}/#{`uname -s`.rstrip}/#{`uname -m`.rstrip}",
			:work_dir => "#{Dir.pwd}/workdir",
			:platform => nil,
			:project_dir => Dir.pwd
	)

	@optionParser = OptionParser.new do |opts|
		opts.banner =  "Usage : #{File.basename $PROGRAM_NAME} [OPTION]"
		opts.separator 'Execute the build libraries listed by the given libraries list.'

		opts.separator ''
		opts.separator 'Global options'

		opts.on('-h', '--help', 'Shows this help.') do
			show_banner
			puts opts
			if $libbuildtool_params.platform.respond_to? 'list_options'
				$libbuildtool_params.platform.list_options
			end
			exit
		end

		opts.on('-r', '--rebuild', 'Rebuild all the lib instead of building the remaining libs.') do
			$libbuildtool_params.rebuild = true
		end

		opts.on('--no-banner', 'Do not output the ASCII art banner.') do
			$libbuildtool_params.show_banner = false
		end


		opts.on('-l', '--libraries-list', '=FILENAME', 'Libraries list to use.', "Default: #{DEFAULT_LIBRARIES_LIST}") do |file|
			$libbuildtool_params.libraries_list = file
		end

		opts.on('-i', '--install-dir', '=DIR', 'Final output directory.', "Default: #{$libbuildtool_params.install_dir}") do |dir|
			$libbuildtool_params.install_dir = dir
		end

		opts.on('--project-dir', '=DIR', 'Project directory.', "Default: #{$libbuildtool_params.project_dir}") do |dir|
			$libbuildtool_params.project_dir = dir
		end

		opts.on('-w', '--work-dir', '=DIR', 'Temp work directory.', "Default: #{$libbuildtool_params.work_dir}") do |dir|
			$libbuildtool_params.work_dir = dir
		end

		opts.separator ''
		opts.separator 'Platform options'
		opts.on('-P', '--list-platforms', 'Prints a list of available platforms.') do
			puts 'List of available platforms:'
			Platforms.list_classes.each do |g|
				puts "  #{g}"
			end
			exit 0
		end

		opts.on('-p', '--platform', '=PLATFORM', 'Name of the platform file to use.') do |platform|
			$libbuildtool_params.platform = Platforms.get_platform platform
			$libbuildtool_params.platform = $libbuildtool_params.platform.new
			$libbuildtool_params.platform_name = platform
		end

		opts.on('--list-platform-options', 'Lists the options of the platform.') do
			unless $libbuildtool_params.platform
				raise 'The platform has to be selected before listing its options.'
			end
			unless $libbuildtool_params.platform.respond_to? 'list_options'
				raise 'The platform has no way to list its options.'
			end
			$libbuildtool_params.platform.list_options
			exit 0
		end

	end
@optionParser.permute!

$libbuildtool_params.platform.permute! if 	$libbuildtool_params.platform


###############################
### Global state resolution ###
###############################


$global_state = OpenStruct.new()
$global_state.work_dir         = $libbuildtool_params.work_dir
$global_state.build_cache_path = "#{$global_state.work_dir}/built.json"
$global_state.source_dir       = "#{$global_state.work_dir}/src"
$global_state.build_dir        = "#{$global_state.work_dir}/build"
$global_state.project_dir = $libbuildtool_params.project_dir
$global_state.libraries_list = $libbuildtool_params.libraries_list
$global_state.libraries_list = "#{$global_state.project_dir}/#{DEFAULT_LIBRARIES_LIST}" if $global_state.libraries_list.nil?


show_banner

libraries = []


$build_options = nil
if defined? $libbuildtool_params.platform.build_options and not $libbuildtool_params.platform.build_options.nil?
	$build_options = $libbuildtool_params.platform.build_options
else
	$build_options =  ArrayStruct.new()
end
$build_options.install_dir = $libbuildtool_params.install_dir


#parsing libraries.desc
begin
	eval(File.open("#{$global_state.libraries_list}").read)
rescue Exception => e
	puts "Crashed while reading the libraries list!!!"
	puts e.backtrace
	puts e
end



#############################
### Directory Preparation ###
#############################
build_cache = []
if Dir.exist? $global_state.work_dir
	if $libbuildtool_params.rebuild
		FileUtils.rm_rf $global_state.build_dir
	else
		build_cache = JSON.parse(File.read($global_state.build_cache_path)) if File.exist? $global_state.build_cache_path
	end

end
	FileUtils.rm_rf $global_state.build_dir if Dir.exist? $global_state.build_dir

	FileUtils.mkdir_p $libbuildtool_params.install_dir


	FileUtils.mkdir_p $global_state.work_dir
	FileUtils.mkdir_p $global_state.source_dir
	FileUtils.mkdir_p $global_state.build_dir


#################################
### Libraries build iteration ###
################################
libraries.each do |desc_filename|
		next if build_cache.include? desc_filename

		begin
			Dir.chdir $global_state.project_dir
			# Holder for the library configuration.
			library = Library.new
			# Default values
			library.build   = Build.configure_make
			library.install = Install.make_install
			library.options = $build_options.clone

			eval(File.open("#{desc_filename}").read)

			library.work_dir = "#{$global_state.build_dir}/#{library.name}"
			FileUtils.rm_rf library.work_dir if Dir.exist? library.work_dir
			FileUtils.mkdir_p library.work_dir

			puts
			puts_banner library.name
			puts

			# The fetch method used is dependent of the configuration.
			if library.fetch == false then
				library.fetch ||= ((library.url.nil? and not library.path.nil?) ?  Fetch.local : Fetch.http)
			end

### FETCH ###
			Dir.chdir $global_state.project_dir

			if library.fetch and not File.exist? library.archive
				scriptSuccess = library.fetch.call library
				throw "Fetch script failed for #{library.name}" if not scriptSuccess
			end

### HASH ###
			Dir.chdir $global_state.project_dir

			archiveIsValid = true
			archiveIsValid = Functions.checkFileHash library.hash, library.archive if library.hash

			if not archiveIsValid
				throw "Hash for #{library.name} do not match with the given archive."
			end

### UNPACK ###
			Dir.chdir $global_state.project_dir

			FileUtils.mkdir_p $global_state.build_dir
			if library.unpack == false
				if(library.archive.include? '.tar' or library.archive.include? 'tgz')
					library.unpack = Unpack.tar
				elsif(library.archive.include? '.zip')
					library.unpack = Unpack.zip
				end
			end



			if library.unpack then
				scriptSuccess = library.unpack.call library
				throw "Unpack script failed for #{library.name}" if not scriptSuccess

				if library.build_subdir.nil?
					to_ignore = ["__MACOSX", ".", ".."]
					listing = Dir.entries library.work_dir
					to_ignore.each do |ignored|
						listing.delete ignored
					end
					# If there's only one component in the directory, go into it.
					library.build_subdir = (listing.first) if listing.length == 1
				end
			end

### PATCH ###
			Dir.chdir $global_state.project_dir
			unless library.patcher != false
				if library.patch.nil?
					library.patcher = nil
				else
					if File.directory? library.patch then
						library.patcher = Patch.copy
					else
						# library.patcher = Patch.copy
					end
				end
			end

			if library.patcher
				scriptSuccess = library.patcher.call library
				throw "Patch script failed for #{library.name}" if not scriptSuccess
			end


### PREPARE BUILD ###
			Dir.chdir $global_state.project_dir

			if library.prepare_build and library.prepare_build != false
				scriptSuccess = library.prepare_build.call library
				throw "The prepare_build script failed for #{library.name}" if not scriptSuccess
			end

### BUILD ###
			Dir.chdir $global_state.project_dir

			if library.build and library.build != false
				scriptSuccess = library.build.call library
				throw "Build script failed for #{library.name}" if not scriptSuccess
			end

### INSTALL ###
			Dir.chdir $global_state.project_dir

			if library.install and library.install != false
				library.install = Install.make_install if not library.install
				scriptSuccess = library.install.call library
				throw "Install script failed for #{library.name}" if not scriptSuccess
			end


			build_cache << desc_filename
			File.write($global_state.build_cache_path, JSON.generate(build_cache))

		rescue Exception => e
			#FileUtils.rm_rf build_dir
			puts "Crashed while building #{desc_filename}!!"
			puts e.backtrace
			puts e
			abort
		end
end

puts_banner 'Done!'
