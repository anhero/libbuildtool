#!/usr/bin/env ruby
# encoding: UTF-8

require 'optparse'
require 'ostruct'
require 'json'
require 'fileutils'

# Module used to namespace internals.
#
# Stuff that is internal to libbuildtool is added to this module
# to make the documentation cleaner.
module LBT

end

require_relative 'classes/arraystruct.rb'
require_relative 'classes/exec'
require_relative 'classes/library'
require_relative 'classes/licenses'
require_relative 'classes/os'
require_relative 'classes/platforms'
require_relative 'classes/step.rb'
require_relative 'classes/stepsfabricator.rb'
require_relative 'classes/steps.rb'
require_relative 'steps/builder'
require_relative 'steps/fetcher'
require_relative 'steps/installer'
require_relative 'steps/patcher'
require_relative 'steps/unpacker'
require_relative 'steps/verifier'

# Adding the StepMaker to the global scope
# This should add only make_step
include LBT::StepMaker

# Include the Steps namespace into the global scope.
include Steps

# Shows a fancy ASCII-art banner
# @return [void]
def show_banner
	return unless $libbuildtool_params.show_banner
	puts <<BANNER
.__  ._____.  ___.         .__.__       .___ __                .__   
|  | |__\\_ |__\\_ |__  __ __|__|  |    __| _//  |_  ____   ____ |  |  
|  | |  || __ \\| __ \\|  |  \\  |  |   / __ |\\   __\\/  _ \\ /  _ \\|  |  
|  |_|  || \\_\\ \\ \\_\\ \\  |  /  |  |__/ /_/ | |  | (  <_> |  <_> )  |__
|____/__||___  /___  /____/|__|____/\\____ | |__|  \\____/ \\____/|____/
             \\/    \\/                    \\/                          
BANNER
end

# Prints text centered in a banner
#
# @param text Text to print
# @param col  Width of the banner
# @param char Character to use for the banner
#
# @return [void]
def puts_banner text, col = 40, char = '*'
	puts ''.rjust(col, char)
	puts "*#{text.center(col -2 )}*"
	puts ''.rjust(col, char)
end

if not ENV['MSYSTEM'] and ENV['OS'] and ENV['OS'].match(/Windows.*/) then
	$PLATFORM = ENV['OS'].strip
	# For now, hardcode 32bits bitness
	$PLATFORM_HW = "win32".strip
else
	$PLATFORM = "#{`uname -s`}".strip
	$PLATFORM_HW = "#{`uname -m`}".strip
end

#######################################
### Options and parameters handling ###
#######################################

	# Default name of the libraries main file.
	DEFAULT_LIBRARIES_LIST = 'libraries.rb'
	$libbuildtool_params = OpenStruct.new(
			:show_banner    => true,
			:libraries_list   => nil,
			:rebuild => false,
			:install_dir => "#{Dir.pwd}/#{$PLATFORM}/#{$PLATFORM_HW}",
			:work_dir => "#{Dir.pwd}/workdir",
			:platform => nil,
			:project_dir => Dir.pwd
	)

	@optionParser = OptionParser.new do |opts|
		opts.banner =  "Usage : #{File.basename $PROGRAM_NAME} [OPTION]"
		opts.separator 'Execute the build libraries listed by the given libraries list.'

		opts.separator ''
		opts.separator 'Global options'

		opts.on('-h', '--help', 'Shows this help.') do
			show_banner
			puts opts
			if $libbuildtool_params.platform.respond_to? 'list_options'
				$libbuildtool_params.platform.list_options
			end
			exit
		end

		opts.on('-r', '--rebuild', 'Rebuild all the lib instead of building the remaining libs.') do
			$libbuildtool_params.rebuild = true
		end

		opts.on('--no-banner', 'Do not output the ASCII art banner.') do
			$libbuildtool_params.show_banner = false
		end


		opts.on('-l', '--libraries-list', '=FILENAME', 'Libraries list to use.', "Default: #{DEFAULT_LIBRARIES_LIST}") do |file|
			$libbuildtool_params.libraries_list = file
		end

		opts.on('-i', '--install-dir', '=DIR', 'Final output directory.', "Default: #{$libbuildtool_params.install_dir}") do |dir|
			$libbuildtool_params.install_dir = dir
		end

		opts.on('--project-dir', '=DIR', 'Project directory.', "Default: #{$libbuildtool_params.project_dir}") do |dir|
			$libbuildtool_params.project_dir = dir
		end

		opts.on('-w', '--work-dir', '=DIR', 'Temp work directory.', "Default: #{$libbuildtool_params.work_dir}") do |dir|
			$libbuildtool_params.work_dir = dir
		end

		opts.separator ''
		opts.separator 'Platform options'
		opts.on('-P', '--list-platforms', 'Prints a list of available platforms.') do
			puts 'List of available platforms:'
			Platforms.list_classes.each do |g|
				puts "  #{g}"
			end
			exit 0
		end

		opts.on('-p', '--platform', '=PLATFORM', 'Name of the platform file to use.') do |platform|
			$libbuildtool_params.platform = Platforms.get_platform platform
			$libbuildtool_params.platform = $libbuildtool_params.platform.new
			$libbuildtool_params.platform_name = platform
		end

		opts.on('--list-platform-options', 'Lists the options of the platform.') do
			unless $libbuildtool_params.platform
				raise 'The platform has to be selected before listing its options.'
			end
			unless $libbuildtool_params.platform.respond_to? 'list_options'
				raise 'The platform has no way to list its options.'
			end
			$libbuildtool_params.platform.list_options
			exit 0
		end

	end
@optionParser.permute!

$libbuildtool_params.platform.permute! if 	$libbuildtool_params.platform


###############################
### Global state resolution ###
###############################


$global_state = OpenStruct.new()
$global_state.work_dir         = $libbuildtool_params.work_dir
$global_state.build_cache_path = "#{$global_state.work_dir}/built.json"
$global_state.source_dir       = "#{$global_state.work_dir}/src"
$global_state.build_dir        = "#{$global_state.work_dir}/build"
$global_state.project_dir = $libbuildtool_params.project_dir
$global_state.libraries_list = $libbuildtool_params.libraries_list
$global_state.libraries_list = "#{$global_state.project_dir}/#{DEFAULT_LIBRARIES_LIST}" if $global_state.libraries_list.nil?


show_banner



$build_options = nil
if defined? $libbuildtool_params.platform.build_options and not $libbuildtool_params.platform.build_options.nil?
	$build_options = $libbuildtool_params.platform.build_options
else
	$build_options =  ArrayStruct.new()
end
$build_options.install_dir = $libbuildtool_params.install_dir



#############################
### Directory Preparation ###
#############################
@build_cache = []
if Dir.exist? $global_state.work_dir
	if $libbuildtool_params.rebuild
		FileUtils.rm_rf $global_state.build_dir
	else
		@build_cache = JSON.parse(File.read($global_state.build_cache_path)) if File.exist? $global_state.build_cache_path
	end

end
FileUtils.rm_rf $global_state.build_dir if Dir.exist? $global_state.build_dir

FileUtils.mkdir_p $libbuildtool_params.install_dir


FileUtils.mkdir_p $global_state.work_dir
FileUtils.mkdir_p $global_state.source_dir
FileUtils.mkdir_p $global_state.build_dir










#################################
### Libraries build iteration ###
#################################

# Builds a library from its description's filename
#
# @param desc_filename File to build.
# @return [void]
def build desc_filename
	unless @build_cache.include? desc_filename
		# FIXME : Scoping feels weird here. Find a better way to handle library, build_options scope.
		begin
			Dir.chdir $global_state.project_dir
			# Used for the backtrace.
			fname = "#{Dir.pwd}/#{desc_filename}"
			# Holder for the library configuration.

			# Pre-scope library
			library = nil
			begin
				eval(File.open(desc_filename).read, nil, fname)
			rescue Exception => e
				puts "A problem occured while parsing/running #{desc_filename}..."
				puts e
				puts e.backtrace
				abort
			end

			library.work_dir = "#{$global_state.build_dir}/#{library.name.downcase.tr(' ', '_')}"
			FileUtils.rm_rf library.work_dir if Dir.exist? library.work_dir
			FileUtils.mkdir_p library.work_dir

			puts
			puts_banner "#{library.name}"

			# Here we're handling each steps registered.
			steps_counter = 0
			library.steps.each do |step|
				steps_counter += 1
				puts "\nâ†’ Doing step (#{steps_counter}/#{library.steps.count}) #{step[:name].capitalize}"
				STDOUT.flush
				# Reset the directory for each step.
				Dir.chdir $global_state.project_dir
				# This is where the step is actually called.
				unless step[:instance].run then
					throw "Step (#{steps_counter}/#{library.steps.count}) #{step[:name].capitalize} failed."
				end
			end

			@build_cache << desc_filename
			File.open($global_state.build_cache_path, "w").write(JSON.pretty_generate(@build_cache))

		rescue Exception => e
			puts "A problem occured while building #{desc_filename}. Last working directory: #{Dir.pwd}"
			puts e
			puts e.backtrace
			abort
		end
	end
end

#parsing libraries.desc
begin
	eval(File.open($global_state.libraries_list).read,nil,$global_state.libraries_list)
	puts
	puts_banner 'Done!'
rescue Exception => e
	puts "Crashed while reading the libraries list!!!"
	puts e.backtrace
	puts e
end



